---
- name: My personal setup v3
  hosts: localhost
  gather_facts: yes
  vars:
    extra_path: "${HOME}/.local/bin:/snap/bin:${HOME}/.ghcup/bin"

  vars_prompt:
    - name: git_user_name
      prompt: What git user name you want ?
      default: essic
      private: no

    - name: git_user_email
      prompt: What git user email you want ?
      default: lollancf37@gmail.com
      private: no

  tasks:
    - name: Ubuntu version !
      debug: msg="{{ansible_distribution_version}}"

    - name: Creates directory
      become: yes
      become_user: essic
      file:
        path: ~/.local/bin
        state: directory
        mode: u=rwx,g=xr,o=x

    - name: Install required packages
      become: yes
      apt:
        name:
          - dotnet6
          - openjdk-18-jdk
          - openjdk-18-jre
          - trash-cli
          - git
          - curl
          - wget
          - zsh
          - xsel
          - clipit
          - python3-bashate
          - shellcheck
          - unzip
          - apt-file
        state: present
        update_cache: yes

    - name: set git user email
      community.general.git_config:
        name: user.email
        scope: global
        value: "{{ git_user_email }}"

    - name: set git user name
      community.general.git_config:
        name: user.name
        scope: global
        value: "{{ git_user_name }}"

    - name: set up git alias pro
      community.general.git_config:
        name: alias.pro
        scope: global
        value: pull --rebase origin

    - name: set up git alias prom
      community.general.git_config:
        name: alias.prom
        scope: global
        value: pull --rebase origin main

    - name: set up git alias psho
      community.general.git_config:
        name: alias.psho
        scope: global
        value: push origin

    - name: set up git alias pshom
      community.general.git_config:
        name: alias.pshom
        scope: global
        value: push origin main

    - name: set up git alias ci
      community.general.git_config:
        name: alias.ci
        scope: global
        value: commit -m

    - name: set up git alias cia
      community.general.git_config:
        name: alias.cia
        scope: global
        value: commit --amend

    - name: set up git alias cian
      community.general.git_config:
        name: alias.cia
        scope: global
        value: commit --amend --no-edit

    - name: set up git alias st
        community.general.git_config:
        name: alias.st
        scope: global
        value: status

    - name: set up git alias co
      community.general.git_config:
        name: alias.co
        scope: global
        value: checkout

    - name: set up git alias cob
      community.general.git_config:
        name: alias.cob
        scope: global
        value: checkout -b

    - name: set git log alias
      community.general.git_config:
        name: alias.lgb
        scope: global
        value: log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset%n' --abbrev-commit --date=relative --branches

    - name: check if docker is installed!
      shell: command -v docker > /dev/null 2>&1
      register: is_docker_installed
      ignore_errors: yes
    
    - name: install docker !
      become: yes
      shell: |
        curl -fsSL https://get.docker.com -o get-docker.sh
        sh get-docker.sh
        usermod -aG docker essic
        rm get-docker.sh
      when: is_docker_installed.rc != 0

    - name: check if az-cli exists!
      shell: command -v az > /dev/null 2>&1
      register: is_az_exist
      ignore_errors: yes

    - name: install az-cli
      become: yes
      shell: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | bash
      args:
        warn: false
      when: is_az_exist.rc != 0

    - name: check if terraform is installed
      shell: command -v terraform > /dev/null 2>&1
      register: is_terraform_installed
      ignore_errors: yes

    - block:
        - name: Install terraform | Configure package manager 
          become: yes
          shell: |
            wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        - name: Install terraform | Run apt get
          shell: |
            sudo apt update && sudo apt install terraform
      when: not is_terraform_installed

   - name: check if rust is installed!
     shell: command -v rustup > /dev/null 2>&1
     register: is_rust_installed
     ignore_errors: yes

    - block:
      - name: download, install and configure Rust
        shell: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          ~/.cargo/bin/rustup toolchain install nightly
          ~/.cargo/bin/rustup default nightly
        args:
          warn: false
        when: is_rust_installed.rc != 0

    - name: Check if OhMyZsh folder already exists!
        stat:
          path: ~/.oh-my-zsh
        register: ohmyzsh

    - block:
        - name: Download OhMyZsh install script
          get_url:
            url: https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh
            dest: ~/install_ohmyzsh.sh
            mode: +x

        - name: Install OhMyZsh!
          command: ~/install_ohmyzsh.sh --unattended

        - name: Remove OhMyZsh install script
          file:
            path: ~/install_ohmyzsh.sh
            state: absent
      when: not ohmyzsh.stat.exists

    - name: check if ghcup is present!
        stat:
          path: ~/.ghcup
        register: ghcup


    - block:
         - name: install ghcup requirement
          become: yes
          apt:
            name:
              - libffi-dev
              - libgmp-dev
              - libgmp10
              - libncurses-dev
              - libncurses5
              - libtinfo5
              - libgmp3-dev
              - libtinfo-dev
              - libghc-zlib-dev
              - build-essential
            state: present
            update_cache: yes

        - name: download ghcup install script
          get_url:
            url: https://get-ghcup.haskell.org
            dest: ~/install_ghcup.sh
            mode: +x

        - name: install ghcup
          shell: | 
            export BOOTSTRAP_HASKELL_NONINTERACTIVE=0 
            ~/install_ghcup.sh

        - name: install ghc, cabal, stack and hls
          shell: |
            ~/.ghcup/bin/ghcup install ghc
            ~/.ghcup/bin/ghcup set ghc
            ~/.ghcup/bin/ghcup install cabal
            ~/.ghcup/bin/ghcup set cabal
            ~/.ghcup/bin/ghcup install hls
            ~/.ghcup/bin/ghcup set hls
            ~/.ghcup/bin/ghcup install stack
            ~/.ghcup/bin/ghcup set stack

        - name: Remove ghcup install script
          file:
            path: ~/install_ghcup.sh
            state: absent

        - name: download summoner 2.0.1.1
          get_url:
            url: https://github.com/kowainik/summoner/releases/download/v2.0.1.1/summon-cli-linux
            dest: ~/.local/summon-cli-linux
            mode: +x

        - name: install summoner
          command: mv ~/.local/summon-cli-linux ~/.local/bin/summon

      when: not ghcup.stat.exists

    - name: check if nvm folder already exists!
      stat:
        path: ~/.nvm
      register: nvm

    - name: install nvm & node tools
      shell: |
        curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
        echo 'export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"' >> ~/.zshrc
        echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> ~/.zshrc
        export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm install --lts
        nvm use default
        npm install -g vmd
        npm install -g bash-language-server
        npm install -g yarn
      args:
        warn: false
      when: not nvm.stat.exists

    - name: Remove dependencies that are no longer required
      become: yes
      apt:
        autoremove: yes

    - name: Install snap
      become: yes
      apt:
        name: snapd
        state: present

    - name: Install postman
      become: yes
      community.general.snap:
        name:
          - postman
        classic: no
        state: present

    - name: Install emacs, pwsh, vscode, nvim
      become: yes
      community.general.snap:
        name:
          - emacs
          - nvim
          - powershell
          - code
        classic: yes
        state: present
    
    - name: Check if Spacemacs config file exists!
      stat:
        path: ~/.spacemacs
      register: smacs

    - block:
        - name: check if .emacs.d folder is present
          stat:
            path: ~/.emacs.d
          register: emacsd

        - name: backup .emacs.d folder
          command: mv ~/.emacs.d ~/.emacs.d.bak
          when: emacsd.stat.exists

        - name: copy spacemacs config
          copy:
            src: ./spacemacs
            dest: ~/.spacemacs
            remote_src: no
            mode: u=rw,g=r,o=r

        - name: clone spacemacs
          git:
            repo: https://github.com/syl20bnr/spacemacs
            dest: ~/.emacs.d
            clone: yes
            update: yes
            version: develop

        - name: run spacemacs once for initialization
          command: /snap/bin/emacs --daemon=first-run

        - name: kill running spacemacs instance
          command: /snap/bin/emacsclient -e '(save-buffers-kill-emacs)' --socket-name first-run

        - debug:
            msg: "Install Spacemacs !"

      when: not smacs.stat.exists

    - name: copy paths config file
      copy:
        src: ./env
        dest: ~/.local/env
        remote_src: no
        mode: u=rw,g=r,o=r

    - name: add extra path
      lineinfile:
        path: ~/.profile
        line: "source ~/.local/env"
        regexp: "source ~/.local/env"
        insertafter: EOF

    - name: change oh-my-zsh theme
      lineinfile:
        path: ~/.zshrc
        line: 'ZSH_THEME="strug"'
        regexp: 'ZSH_THEME=*'

    - name: add smacs alias
      lineinfile:
        path: ~/.zshrc
        line: 'alias smacs="emacs -nw"'
        regexp: 'alias smacs="emacs -nw"'
        insertafter: EOF

    - name: add demacs-start alias
      lineinfile:
        path: ~/.zshrc
        line: 'alias demacs-start="emacs --daemon=spacemacs"'
        regexp: 'alias demacs-start="emacs --daemon=spacemacs"'
        insertafter: EOF

    - name: add demacs-startw alias
      lineinfile:
        path: ~/.zshrc
        line: 'alias demacs-startw="emacs --daemon"'
        regexp: 'alias demacs-startw="emacs --daemon"'
        insertafter: EOF

    - name: add demacs alias
      lineinfile:
        path: ~/.zshrc
        line: 'alias demacs="emacsclient -nc -s spacemacs"'
        regexp: 'alias demacs="emacsclient -nc -s spacemacs"'
        insertafter: EOF

    - name: add demacs-w alias
      lineinfile:
        path: ~/.zshrc
        line: 'alias demacs-w="emacsclient -nc -s"'
        regexp: 'alias demacs-w="emacsclient -nc -s"'
        insertafter: EOF

    - name: add demacs-stop alias
      lineinfile:
        path: ~/.zshrc
        line: 'alias demacs-stop="emacsclient -e \"(save-buffers-kill-emacs)\" --socket-name spacemacs"'
        regexp: 'alias demacs-stop="emacsclient -e \"(save-buffers-kill-emacs)\" --socket-name spacemacs"'
        insertafter: EOF
    
    - name: add demacs-stopw alias
      lineinfile:
        path: ~/.zshrc
        line: 'alias demacs-stopw="emacsclient -e \"(save-buffers-kill-emacs)\" --socket-name"'
        regexp: 'alias demacs-stopw="emacsclient -e \"(save-buffers-kill-emacs)\" --socket-name"'
        insertafter: EOF

    - name: load profile in zsh
      lineinfile:
          path: ~/.zshrc
          line: 'source ~/.profile'
          regexp: 'source ~/.profile'
          insertafter: EOF

    - name: add terraform alias
      lineinfile:
        path: ~/.zshrc
        line: "alias tf=terraform"
        regexp: "alias tf=terraform"
        insertafter: EOF

    - name: add postman alias
      lineinfile:
        path: ~/.zshrc
        line: 'alias pm="postman </dev/null &>/dev/null &"'
        regexp: 'alias pm="postman </dev/null &>/dev/null &"'
        insertafter: EOF

    - name: change shell to zsh
      become: yes
      user:
        name: essic
        shell: /bin/zsh
