---
- name: My personal setup v3
  hosts: localhost
  gather_facts: true
  roles:
    - role: diodonfrost.terraform
      become: true
      vars:
        os_type: linux
        base_arch: aarch64
        terraform_version: latest
  vars:
    extra_path: "${HOME}/.local/bin:/snap/bin:${HOME}/.ghcup/bin:${HOME}/.cargo/bin"

  vars_prompt:
    - name: user_login
      prompt: What is your username ?
      default: essic
      private: false

    - name: git_user_name
      prompt: What git user name you want ?
      default: essic
      private: false

    - name: git_user_email
      prompt: What git user email you want ?
      default: lollancf37@gmail.com
      private: false

  tasks:
    - name: Ubuntu version !
      ansible.builtin.debug: msg=`{{ ansible_distribution_version }}`

    - name: Creates directory
      become: true
      become_user: '{{ user_login }}'
      ansible.builtin.file:
        path: ~/.local/bin
        state: directory
        mode: u=rwx,g=xr,o=x
     
    - name: Install required packages
      become: true
      ansible.builtin.apt:
        name:
          #- dotnet6
          - openjdk-18-jdk
          - openjdk-18-jre
          - elixir
          - trash-cli
          - git
          - curl
          - wget
          - zsh
          - xsel
          - clipit
          - python3-bashate
          - shellcheck
          - unzip
          - apt-file
          - ruby
          - libncurses5-dev
          - libncursesw5-dev
          - ruby
        state: latest
        update_cache: true

    - name: Install mdless
      become: true
      ansible.builtin.shell: |
        gem install mdless

    - name: Set git user email
      community.general.git_config:
        name: user.email
        scope: global
        value: '{{ git_user_email }}'

    - name: Set git user name
      community.general.git_config:
        name: user.name
        scope: global
        value: '{{ git_user_name }}'

    - name: Set up git alias pro
      community.general.git_config:
        name: alias.pro
        scope: global
        value: pull --rebase origin

    - name: Set up git alias prom
      community.general.git_config:
        name: alias.prom
        scope: global
        value: pull --rebase origin main

    - name: Set up git alias psho
      community.general.git_config:
        name: alias.psho
        scope: global
        value: push origin

    - name: Set up git alias pshom
      community.general.git_config:
        name: alias.pshom
        scope: global
        value: push origin main

    - name: Set up git alias ci
      community.general.git_config:
        name: alias.ci
        scope: global
        value: commit -m

    - name: Set up git alias cia
      community.general.git_config:
        name: alias.cia
        scope: global
        value: commit --amend

    - name: Set up git alias cian
      community.general.git_config:
        name: alias.cia
        scope: global
        value: commit --amend --no-edit

    - name: Set up git alias st
      community.general.git_config:
        name: alias.st
        scope: global
        value: status

    - name: Set up git alias co
      community.general.git_config:
        name: alias.co
        scope: global
        value: checkout

    - name: Set up git alias cob
      community.general.git_config:
        name: alias.cob
        scope: global
        value: checkout -b

    - name: Set git log alias
      community.general.git_config:
        name: alias.lgb
        scope: global
        value: log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset%n' --abbrev-commit --date=relative --branches

    - name: Check if docker is installed!
      ansible.builtin.command: docker --version
      register: docker_installed
      ignore_errors: true

    - name: Install docker !
      become: true
      ansible.builtin.shell: |
        curl -fsSL https://get.docker.com -o get-docker.sh
        sh get-docker.sh
        usermod -aG docker essic
        rm get-docker.sh
      when: docker_installed.failed 

    - name: Check if az-cli exists!
      ansible.builtin.command: az version 
      register: az_cli_installed
      ignore_errors: true

    - name: az value
      ansible.builtin.debug:
        msg: Value -> {{ az_cli_installed }} 

    - name: Install az-cli
      become: true
      ansible.builtin.shell: |
        pip3 install azure-cli
      when: az_cli_installed.failed

    - name: Check if rust is installed!
      ansible.builtin.command: rustup --version
      register: rust_installed
      ignore_errors: true

    - name: Rust installation!
      block:
        - name: Download, install and configure Rust
          ansible.builtin.shell: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            ~/.cargo/bin/rustup toolchain install nightly
            ~/.cargo/bin/rustup default nightly
      when: rust_installed.failed

    - name: Check if OhMyZsh is installed!
      ansible.builtin.command: ls ~/.oh-my-zsh 
      register: omz_installed
      ignore_errors: true

    - name: OhMyZsh installation!
      block:
        - name: Download OhMyZsh install script
          ansible.builtin.get_url:
            url: https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh
            dest: ~/install_ohmyzsh.sh
            mode: +x
        - name: Install OhMyZsh!
          ansible.builtin.shell: |
            cd ~
            ./install_ohmyzsh.sh --unattended
        - name: Remove OhMyZsh install script
          ansible.builtin.file:
            path: ~/install_ohmyzsh.sh
            state: absent
      when: omz_installed.failed

    - name: Check if ghcup is present!
      ansible.builtin.command: ghcup --version
      ignore_errors: true
      register: ghcup_installed

    - name: Haskell installation with GHCUP
      block:
        - name: Install ghcup requirement
          become: true
          ansible.builtin.apt:
            name:
              - libffi-dev
              - libgmp-dev
              - libgmp10
              - libncurses-dev
              - libncurses5
              - libtinfo5
              - libgmp3-dev
              - libtinfo-dev
              - libghc-zlib-dev
              - build-essential
            state: present
            update_cache: true
        - name: Download ghcup install script
          ansible.builtin.get_url:
            url: https://get-ghcup.haskell.org
            dest: ~/install_ghcup.sh
            mode: +x
        - name: Install ghcup
          changed_when: false
          ansible.builtin.shell: |
            export BOOTSTRAP_HASKELL_NONINTERACTIVE=0
            ~/install_ghcup.sh
        - name: Install ghc, cabal, stack and hls
          changed_when: false
          ansible.builtin.shell: |
            ~/.ghcup/bin/ghcup install ghc
            ~/.ghcup/bin/ghcup set ghc
            ~/.ghcup/bin/ghcup install cabal
            ~/.ghcup/bin/ghcup set cabal
            ~/.ghcup/bin/ghcup install hls
            ~/.ghcup/bin/ghcup set hls
            ~/.ghcup/bin/ghcup install stack
            ~/.ghcup/bin/ghcup set stack
        - name: Remove ghcup install script
          ansible.builtin.file:
            path: ~/install_ghcup.sh
            state: absent
        - name: Download summoner 2.0.1.1
          ansible.builtin.get_url:
            url: https://github.com/kowainik/summoner/releases/download/v2.0.1.1/summon-cli-linux
            dest: ~/.local/summon-cli-linux
            mode: +x
        - name: Install summoner
          ansible.builtin.command: mv ~/.local/summon-cli-linux ~/.local/bin/summon
      when: ghcup_installed.failed

    - name: Check if nvm folder already exists!
      ansible.builtin.stat:
        path: ~/.nvm
      register: nvm

    - name: Install nvm & node tools
      ansible.builtin.shell: |
        curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
        echo 'export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"' >> ~/.zshrc
        echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> ~/.zshrc
        export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm install --lts
        nvm use default
        npm install -g vmd
        npm install -g bash-language-server
        npm install -g yarn
      args:
        warn: false
      when: not nvm.stat.exists

    - name: Remove dependencies that are no longer required
      become: true
      ansible.builtin.apt:
        autoremove: true

    - name: Install snap
      become: true
      ansible.builtin.apt:
        name: snapd
        state: present

    - name: Install pwsh, vscode, nvim, intellij, rider
      become: true
      community.general.snap:
        name:
          - nvim
          - powershell
          - code
          - intellij-idea-ultimate
#         - rider
        classic: true
        state: present
      ignore_errors: true

    - name: Install emacs
      become: true
      community.general.snap:
        name:
          - emacs
        classic: true
        state: present

    - name: Check if Spacemacs config file exists!
      ansible.builtin.stat:
        path: ~/.spacemacs
      register: smacs

    - name: Check if .emacs.d folder is present
      ansible.builtin.stat:
        path: ~/.emacs.d
      register: emacsd

    - name: Install Spacemacs
      block:
        - name: Backup .emacs.d folder
          ansible.builtin.command: mv ~/.emacs.d ~/.emacs.d.bak
          when: emacsd.stat.exists and emacsd.stat.isdir
        - name: Copy spacemacs config
          ansible.builtin.copy:
            src: ./spacemacs
            dest: ~/.spacemacs
            remote_src: false
            mode: u=rw,g=r,o=r
        - name: Clone spacemacs
          ansible.builtin.git:
            repo: https://github.com/syl20bnr/spacemacs
            dest: ~/.emacs.d
            clone: true
            update: true
            version: develop
        - name: Run spacemacs once for initialization
          ansible.builtin.command: /snap/bin/emacs --daemon=first-run
          changed_when: false
      when: not smacs.stat.exists

    - name: Copy paths config file
      ansible.builtin.copy:
        src: ./env
        dest: ~/.local/env
        remote_src: false
        mode: u=rw,g=r,o=r

    - name: Add extra path
      ansible.builtin.lineinfile:
        path: ~/.profile
        line: "source ~/.local/env"
        regexp: "source ~/.local/env"
        insertafter: EOF

    - name: Change oh-my-zsh theme
      ansible.builtin.lineinfile:
        path: ~/.zshrc
        line: 'ZSH_THEME="strug"'
        regexp: 'ZSH_THEME=*'

    - name: Add smacs alias
      ansible.builtin.lineinfile:
        path: ~/.zshrc
        line: 'alias smacs="emacs -nw"'
        regexp: 'alias smacs="emacs -nw"'
        insertafter: EOF

    - name: Add demacs-start alias
      ansible.builtin.lineinfile:
        path: ~/.zshrc
        line: 'alias demacs-start="emacs --daemon=spacemacs"'
        regexp: 'alias demacs-start="emacs --daemon=spacemacs"'
        insertafter: EOF

    - name: Add demacs-startw alias
      ansible.builtin.lineinfile:
        path: ~/.zshrc
        line: 'alias demacs-startw="emacs --daemon"'
        regexp: 'alias demacs-startw="emacs --daemon"'
        insertafter: EOF

    - name: Add demacs alias
      ansible.builtin.lineinfile:
        path: ~/.zshrc
        line: 'alias demacs="emacsclient -nc -s spacemacs"'
        regexp: 'alias demacs="emacsclient -nc -s spacemacs"'
        insertafter: EOF

    - name: Add demacs-w alias
      ansible.builtin.lineinfile:
        path: ~/.zshrc
        line: 'alias demacs-w="emacsclient -nc -s"'
        regexp: 'alias demacs-w="emacsclient -nc -s"'
        insertafter: EOF

    - name: Add demacs-stop alias
      ansible.builtin.lineinfile:
        path: ~/.zshrc
        line: 'alias demacs-stop="emacsclient -e \"(save-buffers-kill-emacs)\" --socket-name spacemacs"'
        regexp: 'alias demacs-stop="emacsclient -e \"(save-buffers-kill-emacs)\" --socket-name spacemacs"'
        insertafter: EOF

    - name: Add demacs-stopw alias
      ansible.builtin.lineinfile:
        path: ~/.zshrc
        line: 'alias demacs-stopw="emacsclient -e \"(save-buffers-kill-emacs)\" --socket-name"'
        regexp: 'alias demacs-stopw="emacsclient -e \"(save-buffers-kill-emacs)\" --socket-name"'
        insertafter: EOF

    - name: Load profile in zsh
      ansible.builtin.lineinfile:
        path: ~/.zshrc
        line: 'source ~/.profile'
        regexp: 'source ~/.profile'
        insertafter: EOF

    - name: Add terraform alias
      ansible.builtin.lineinfile:
        path: ~/.zshrc
        line: "alias tf=terraform"
        regexp: "alias tf=terraform"
        insertafter: EOF

    - name: Add postman alias
      ansible.builtin.lineinfile:
        path: ~/.zshrc
        line: 'alias pm="postman </dev/null &>/dev/null &"'
        regexp: 'alias pm="postman </dev/null &>/dev/null &"'
        insertafter: EOF

    - name: Change shell to zsh
      become: true
      ansible.builtin.user:
        name: '{{ user_login }}'
        shell: /bin/zsh
